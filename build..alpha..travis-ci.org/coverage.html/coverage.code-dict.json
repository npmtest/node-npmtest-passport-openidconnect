{"/home/travis/build/npmtest/node-npmtest-passport-openidconnect/test.js":"/* istanbul instrument in package npmtest_passport_openidconnect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-openidconnect/lib.npmtest_passport_openidconnect.js":"/* istanbul instrument in package npmtest_passport_openidconnect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_passport_openidconnect = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_passport_openidconnect = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-openidconnect/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-passport-openidconnect && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_passport_openidconnect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_passport_openidconnect\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_passport_openidconnect.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_passport_openidconnect.rollup.js'] =\n            local.assetsDict['/assets.npmtest_passport_openidconnect.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_passport_openidconnect.__dirname + '/lib.npmtest_passport_openidconnect.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-passport-openidconnect/node_modules/passport-openidconnect/lib/index.js":"// Load modules.\nvar Strategy = require('./strategy');\n\n\n// Expose Strategy.\nexports = module.exports = Strategy;\n\n// Exports.\nexports.Strategy = Strategy;\n","/home/travis/build/npmtest/node-npmtest-passport-openidconnect/node_modules/passport-openidconnect/lib/strategy.js":"/**\n * Module dependencies.\n */\nvar passport = require('passport-strategy')\n  , url = require('url')\n  , querystring= require('querystring')\n  , util = require('util')\n  , utils = require('./utils')\n  , OAuth2 = require('oauth').OAuth2\n  , SessionStateStore = require('./state/session')\n  //, setup = require('./setup')\n  , InternalOAuthError = require('./errors/internaloautherror')\n  , AuthorizationError = require('./errors/authorizationerror');\n\n\n/**\n * `Strategy` constructor.\n *\n * The OpenID Connect authentication strategy authenticates requests using\n * OpenID Connect, which is an identity layer on top of the OAuth 2.0 protocol.\n *\n * @param {Object} options\n * @param {Function} verify\n * @api public\n */\nfunction Strategy(options, verify) {\n  options = options || {};\n  passport.Strategy.call(this);\n  this.name = 'openidconnect';\n  this._verify = verify;\n  \n  // TODO: What's the recommended field name for OpenID Connect?\n  this._identifierField = options.identifierField || 'openid_identifier';\n  this._scope = options.scope;\n  this._passReqToCallback = options.passReqToCallback;\n  this._skipUserProfile = (options.skipUserProfile === undefined) ? false : options.skipUserProfile;\n  \n  this._setup = undefined;\n\n  this._key = options.sessionKey || (this.name + ':' + url.parse(options.authorizationURL).hostname);\n  this._stateStore = options.store || new SessionStateStore({ key: this._key });\n\n  if (options.authorizationURL && options.tokenURL) {\n    // This OpenID Connect strategy is configured to work with a specific\n    // provider.  Override the discovery process with pre-configured endpoints.\n    this.configure(require('./setup/manual')(options));\n    //this.configure(require('./setup/dynamic')(options));\n  } else {\n    this.configure(require('./setup/dynamic')(options));\n  }\n}\n\n/**\n * Inherit from `passport.Strategy`.\n */\nutil.inherits(Strategy, passport.Strategy);\n\n\n/**\n * Authenticate request by delegating to an OpenID Connect provider.\n *\n * @param {Object} req\n * @param {Object} options\n * @api protected\n */\nStrategy.prototype.authenticate = function(req, options) {\n  options = options || {};\n  var self = this;\n\n  if (req.query && req.query.error) {\n    if (req.query.error == 'access_denied') {\n      return this.fail({ message: req.query.error_description });\n    } else {\n      return this.error(new AuthorizationError(req.query.error_description, req.query.error, req.query.error_uri));\n    }\n  }\n\n  if (req.query && req.query.code) {\n\n    function loaded(err, ok, state) {\n      if (err) { return self.error(err); }\n      if (!ok) {\n        return self.fail(state, 403);\n      }\n      var code = req.query.code;\n\n      var meta = state;\n      var callbackURL = meta.callbackURL;\n\n      var oauth2 = self._getOAuth2Client(meta);\n\n      oauth2.getOAuthAccessToken(code, { grant_type: 'authorization_code', redirect_uri: callbackURL }, function(err, accessToken, refreshToken, params) {\n        if (err) { return self.error(new InternalOAuthError('failed to obtain access token', err)); }\n\n        var idToken = params['id_token'];\n        if (!idToken) { return self.error(new Error('ID Token not present in token response')); }\n\n        var idTokenSegments = idToken.split('.')\n          , jwtClaimsStr\n          , jwtClaims;\n\n        try {\n          jwtClaimsStr = new Buffer(idTokenSegments[1], 'base64').toString();\n          jwtClaims = JSON.parse(jwtClaimsStr);\n        } catch (ex) {\n          return self.error(ex);\n        }\n\n        var missing = ['iss', 'sub', 'aud', 'exp', 'iat'].filter( function(param) { return !jwtClaims[param] } );\n        if (missing.length) return self.error(new Error('id token is missing required parameter(s) - ' + missing.join(', ')));\n\n        // https://openid.net/specs/openid-connect-basic-1_0.html#IDTokenValidation - check 1.\n        if (jwtClaims.iss !== meta.issuer) return self.error(new Error('id token not issued by correct OpenID provider - ' +\n                                                                       'expected: ' + meta.issuer + ' | from: ' + jwtClaims.iss));\n\n        // https://openid.net/specs/openid-connect-basic-1_0.html#IDTokenValidation - checks 2 and 3.\n        if (typeof jwtClaims.aud === 'string') {\n          if (jwtClaims.aud !== meta.clientID) return self.error(new Error('aud parameter does not include this client - is: '\n                                                                           + jwtClaims.aud + '| expected: ' + meta.clientID));\n        } else if (Array.isArray(jwtClaims.aud)) {\n          if (jwtClaims.aud.indexOf(meta.clientID) === -1) return self.error(new Error('aud parameter does not include this client - is: ' +\n                                                                                       jwtClaims.aud + ' | expected to include: ' + meta.clientID));\n          if (jwtClaims.length > 1 && !jwtClaims.azp) return self.error(new Error('azp parameter required with multiple audiences'));\n        } else {\n          return self.error(new Error('Invalid aud parameter type'));\n        }\n\n        // https://openid.net/specs/openid-connect-basic-1_0.html#IDTokenValidation - check 4.\n        if (jwtClaims.azp && jwtClaims.azp !== meta.clientID) return self.error(new Error('this client is not the authorized party - ' +\n                                                                                          'expected: ' + meta.clientID + ' | is: ' + jwtClaims.azp));\n\n        // Possible TODO: Add accounting for some clock skew.\n        // https://openid.net/specs/openid-connect-basic-1_0.html#IDTokenValidation - check 5.\n        if (jwtClaims.exp < (Date.now() / 1000)) return self.error(new Error('id token has expired'));\n\n        // Note: https://openid.net/specs/openid-connect-basic-1_0.html#IDTokenValidation - checks 6 and 7 are out of scope of this library.\n\n        // https://openid.net/specs/openid-connect-basic-1_0.html#IDTokenValidation - check 8.\n        if (meta.params.max_age && (!jwtClaims.auth_time || ((meta.timestamp - meta.params.max_age) > jwtClaims.auth_time))) {\n          return self.error(new Error('auth_time in id_token not included or too old'));\n        }\n\n        if (meta.params.nonce && (!jwtClaims.nonce || jwtClaims.nonce !== meta.params.nonce)) {\n          return self.error(new Error('Invalid nonce in id_token'));\n        }\n\n        var iss = jwtClaims.iss;\n        var sub = jwtClaims.sub;\n        // Prior to OpenID Connect Basic Client Profile 1.0 - draft 22, the\n        // \"sub\" claim was named \"user_id\".  Many providers still issue the\n        // claim under the old field, so fallback to that.\n        if (!sub) {\n          sub = jwtClaims.user_id;\n        }\n\n        self._shouldLoadUserProfile(iss, sub, function(err, load) {\n          if (err) { return self.error(err); };\n\n          if (load) {\n            var parsed = url.parse(meta.userInfoURL, true);\n            parsed.query['schema'] = 'openid';\n            delete parsed.search;\n            var userInfoURL = url.format(parsed);\n\n            // NOTE: We are calling node-oauth's internal `_request` function (as\n            //       opposed to `get`) in order to send the access token in the\n            //       `Authorization` header rather than as a query parameter.\n            //\n            //       Additionally, the master branch of node-oauth (as of\n            //       2013-02-16) will include the access token in *both* headers\n            //       and query parameters, which is a violation of the spec.\n            //       Setting the fifth argument of `_request` to `null` works\n            //       around this issue.  I've noted this in comments here:\n            //       https://github.com/ciaranj/node-oauth/issues/117\n\n            //oauth2.get(userInfoURL, accessToken, function (err, body, res) {\n            oauth2._request(\"GET\", userInfoURL, { 'Authorization': \"Bearer \" + accessToken, 'Accept': \"application/json\" }, null, null, function (err, body, res) {\n              if (err) { return self.error(new InternalOAuthError('failed to fetch user profile', err)); }\n\n              var profile = {};\n\n              try {\n                var json = JSON.parse(body);\n\n                profile.id = json.sub;\n                // Prior to OpenID Connect Basic Client Profile 1.0 - draft 22, the\n                // \"sub\" key was named \"user_id\".  Many providers still use the old\n                // key, so fallback to that.\n                if (!profile.id) {\n                  profile.id = json.user_id;\n                }\n\n                profile.displayName = json.name;\n                profile.name = { familyName: json.family_name,\n                                 givenName: json.given_name,\n                                 middleName: json.middle_name };\n\n                profile._raw = body;\n                profile._json = json;\n\n                onProfileLoaded(profile);\n              } catch(ex) {\n                return self.error(ex);\n              }\n            });\n          } else {\n            onProfileLoaded();\n          }\n\n          function onProfileLoaded(profile) {\n            function verified(err, user, info) {\n              if (err) { return self.error(err); }\n              if (!user) { return self.fail(info); }\n\n              info = info || {};\n              if (state) { info.state = state; }\n              self.success(user, info);\n            }\n\n            if (self._passReqToCallback) {\n              var arity = self._verify.length;\n              if (arity == 9) {\n                self._verify(req, iss, sub, profile, jwtClaims, accessToken, refreshToken, params, verified);\n              } else if (arity == 8) {\n                self._verify(req, iss, sub, profile, accessToken, refreshToken, params, verified);\n              } else if (arity == 7) {\n                self._verify(req, iss, sub, profile, accessToken, refreshToken, verified);\n              } else if (arity == 5) {\n                self._verify(req, iss, sub, profile, verified);\n              } else { // arity == 4\n                self._verify(req, iss, sub, verified);\n              }\n            } else {\n              var arity = self._verify.length;\n              if (arity == 8) {\n                self._verify(iss, sub, profile, jwtClaims, accessToken, refreshToken, params, verified);\n              } else if (arity == 7) {\n                self._verify(iss, sub, profile, accessToken, refreshToken, params, verified);\n              } else if (arity == 6) {\n                self._verify(iss, sub, profile, accessToken, refreshToken, verified);\n              } else if (arity == 4) {\n                self._verify(iss, sub, profile, verified);\n              } else { // arity == 3\n                self._verify(iss, sub, verified);\n              }\n            }\n          } // onProfileLoaded    \n        }); // self._shouldLoadUserProfile\n      }); // oauth2.getOAuthAccessToken\n    } // loaded\n\n    var state = req.query.state;\n    try {\n      self._stateStore.verify(req, state, loaded);\n    } catch (ex) {\n      return self.error(ex);\n    }\n  } else {\n    // The request being authenticated is initiating OpenID Connect\n    // authentication.  Prior to redirecting to the provider, configuration will\n    // be loaded.  The configuration is typically either pre-configured or\n    // discovered dynamically.  When using dynamic discovery, a user supplies\n    // their identifer as input.\n  \n    var identifier;\n    if (req.body && req.body[this._identifierField]) {\n      identifier = req.body[this._identifierField];\n    } else if (req.query && req.query[this._identifierField]) {\n      identifier = req.query[this._identifierField];\n    }\n  \n    // FIXME: Hard coded for test purposes:\n    //identifier = 'acct:paulej@packetizer.com';\n    this._setup(identifier, function(err, config) {\n      if (err) { return self.error(err); }\n\n      // Required Parameters\n      var meta = config;\n\n      var callbackURL = options.callbackURL || config.callbackURL;\n      if (callbackURL) {\n        var parsed = url.parse(callbackURL);\n        if (!parsed.protocol) {\n          // The callback URL is relative, resolve a fully qualified URL from the\n          // URL of the originating request.\n          callbackURL = url.resolve(utils.originalURL(req), callbackURL);\n        }\n      }\n      meta.callbackURL = callbackURL;\n\n      var params = self.authorizationParams(options);\n      params['response_type'] = 'code';\n      params['client_id'] = config.clientID;\n      if (callbackURL) { params.redirect_uri = callbackURL; }\n      var scope = options.scope || self._scope;\n      if (Array.isArray(scope)) { scope = scope.join(' '); }\n      if (scope) {\n        params.scope = 'openid ' + scope;\n      } else {\n        params.scope = 'openid';\n      }\n\n      // Optional Parameters\n\n      var simple_optional_params = ['max_age', 'ui_locals', 'id_token_hint', 'login_hint', 'acr_values'];\n      simple_optional_params.filter( x => { return x in config } ).map( y => { params[y] = config[y] } );\n\n      if (config.display && ['page', 'popup', 'touch', 'wap'].indexOf(config.display) !== -1) params.display = config.display;\n      if (config.prompt && ['none', 'login', 'consent', 'select_account'].indexOf(config.prompt) !== -1) params.prompt = config.prompt;\n\n      if (config.nonce && typeof config.nonce === 'boolean') { params.nonce = utils.uid(20); }\n      if (config.nonce && typeof config.nonce === 'number') { params.nonce = utils.uid(config.nonce); }\n      if (config.nonce && typeof config.nonce === 'string') { params.nonce = config.nonce; }\n\n      if (params.max_age) meta.timestamp = Math.floor(Date.now() / 1000);\n\n      meta.params = params;\n      for (param in params) {\n        if (meta[param]) delete meta[param]; // Remove redundant information.\n      }\n\n      // State Storage/Management\n\n      function stored(err, state) {\n        if (err) { return self.error(err); }\n        if (!state) { return self.error(new Error('Unable to generate required state parameter')); }\n\n        params.state = state;\n        var location = config.authorizationURL + '?' + querystring.stringify(params);\n        self.redirect(location);\n      }\n\n      try {\n        var arity = self._stateStore.store.length;\n        if (arity == 3) {\n          self._stateStore.store(req, meta, stored);\n        } else { // arity == 2\n          self._stateStore.store(req, stored);\n        }\n      } catch (ex) {\n        return self.error(ex);\n      }\n    }); // this.configure\n  }\n}\n\n/**\n * Register a function used to configure the strategy.\n *\n * OpenID Connect is an identity layer on top of OAuth 2.0.  OAuth 2.0 requires\n * knowledge of certain endpoints (authorization, token, etc.) as well as a\n * client identifier (and corresponding secret) registered at the authorization\n * server.\n *\n * Configuration functions are responsible for loading this information.  This\n * is typically done via one of two popular mechanisms:\n *\n *   - The configuration is known ahead of time, and pre-configured via options\n *     to the strategy.\n *   - The configuration is dynamically loaded, using optional discovery and\n *     registration specifications.  (Note: Providers are not required to\n *     implement support for dynamic discovery and registration.  As such, there\n *     is no guarantee that this will result in successfully initiating OpenID\n *     Connect authentication.)\n *\n * @param {Function} fn\n * @api public\n */\nStrategy.prototype.configure = function(identifier, done) {\n  this._setup = identifier;\n}\n\n\n/**\n * Return extra parameters to be included in the authorization request.\n *\n * Some OpenID Connect providers allow additional, non-standard parameters to be\n * included when requesting authorization.  Since these parameters are not\n * standardized by the OpenID Connect specification, OpenID Connect-based\n * authentication strategies can overrride this function in order to populate\n * these parameters as required by the provider.\n *\n * @param {Object} options\n * @return {Object}\n * @api protected\n */\nStrategy.prototype.authorizationParams = function(options) {\n  return {};\n}\n\n/**\n * Check if should load user profile, contingent upon options.\n *\n * @param {String} issuer\n * @param {String} subject\n * @param {Function} done\n * @api private\n */\nStrategy.prototype._shouldLoadUserProfile = function(issuer, subject, done) {\n  if (typeof this._skipUserProfile == 'function' && this._skipUserProfile.length > 1) {\n    // async\n    this._skipUserProfile(issuer, subject, function(err, skip) {\n      if (err) { return done(err); }\n      if (!skip) { return done(null, true); }\n      return done(null, false);\n    });\n  } else {\n    var skip = (typeof this._skipUserProfile == 'function') ? this._skipUserProfile(issuer, subject) : this._skipUserProfile;\n    if (!skip) { return done(null, true); }\n    return done(null, false);\n  }\n}\n\nStrategy.prototype._getOAuth2Client = function (config) {\n  return new OAuth2(config.clientID, config.clientSecret,\n                    '', config.authorizationURL, config.tokenURL);\n}\n\n/**\n * Expose `Strategy`.\n */ \nmodule.exports = Strategy;\n","/home/travis/build/npmtest/node-npmtest-passport-openidconnect/node_modules/passport-openidconnect/lib/utils.js":"var crypto = require('crypto');\n\n\n/**\n * Reconstructs the original URL of the request.\n *\n * This function builds a URL that corresponds the original URL requested by the\n * client, including the protocol (http or https) and host.\n *\n * If the request passed through any proxies that terminate SSL, the\n * `X-Forwarded-Proto` header is used to detect if the request was encrypted to\n * the proxy.\n *\n * @return {String}\n * @api private\n */\nexports.originalURL = function(req, options) {\n  options = options || {};\n  var app = req.app;\n  if (app && app.get && app.get('trust proxy')) {\n    options.proxy = true;\n  }\n  var trustProxy = options.proxy;\n  \n  var proto = (req.headers['x-forwarded-proto'] || '').toLowerCase()\n    , tls = req.connection.encrypted || (trustProxy && 'https' == proto.split(/\\s*,\\s*/)[0])\n    , host = (trustProxy && req.headers['x-forwarded-host']) || req.headers.host\n    , protocol = tls ? 'https' : 'http'\n    , path = req.url || '';\n  return protocol + '://' + host + path;\n};\n\n/**\n * Merge object b with object a.\n *\n *     var a = { foo: 'bar' }\n *       , b = { bar: 'baz' };\n *     \n *     utils.merge(a, b);\n *     // => { foo: 'bar', bar: 'baz' }\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Object}\n * @api private\n */\n\nexports.merge = function(a, b){\n  if (a && b) {\n    for (var key in b) {\n      a[key] = b[key];\n    }\n  }\n  return a;\n};\n\n/**\n * Return a unique identifier with the given `len`.\n *\n *     utils.uid(10);\n *     // => \"FDaS435D2z\"\n *\n * CREDIT: Connect -- utils.uid\n *         https://github.com/senchalabs/connect/blob/2.7.2/lib/utils.js\n *\n * @param {Number} len\n * @return {String}\n * @api private\n */\n\nexports.uid = function(len) {\n  return crypto.randomBytes(Math.ceil(len * 3 / 4))\n    .toString('base64')\n    .slice(0, len);\n};\n","/home/travis/build/npmtest/node-npmtest-passport-openidconnect/node_modules/passport-openidconnect/lib/state/session.js":"var utils = require('../utils');\n\n/**\n * Creates an instance of `SessionStore`.\n *\n * This is the state store implementation for the OIDCStrategy used when\n * the `state` option is enabled.  It generates a random state and stores it in\n * `req.session` and verifies it when the service provider redirects the user\n * back to the application.\n *\n * This state store requires session support.  If no session exists, an error\n * will be thrown.\n *\n * Options:\n *\n *   - `key`  The key in the session under which to store the state\n *\n * @constructor\n * @param {Object} options\n * @api public\n */\nfunction SessionStore(options) {\n  if (!options.key) { throw new TypeError('Session-based state store requires a session key'); }\n  this._key = options.key;\n}\n\n/**\n * Store request state.\n *\n * This implementation simply generates a random string and stores the value in\n * the session, where it will be used for verification when the user is\n * redirected back to the application.\n *\n * @param {Object} req\n * @param {Function} callback\n * @api protected\n */\nSessionStore.prototype.store = function(req, meta, callback) {\n  if (!req.session) { return callback(new Error('OpenID Connect authentication requires session support when using state. Did you forget to use express-session middleware?')); }\n\n  var key = this._key;\n  var handle = utils.uid(24);\n\n  var state = { handle: handle };\n  for (entry in meta) {\n    state[entry] = meta[entry];\n  }\n\n  if (!req.session[key]) { req.session[key] = {}; }\n  req.session[key].state = state;\n\n  callback(null, handle);\n};\n\n/**\n * Verify request state.\n *\n * This implementation simply compares the state parameter in the request to the\n * value generated earlier and stored in the session.\n *\n * @param {Object} req\n * @param {String} providedState\n * @param {Function} callback\n * @api protected\n */\nSessionStore.prototype.verify = function(req, providedState, callback) {\n  if (!req.session) { return callback(new Error('OpenID Connect authentication requires session support when using state. Did you forget to use express-session middleware?')); }\n\n  var key = this._key;\n  if (!req.session[key]) {\n   return callback(null, false, { message: 'Unable to verify authorization request state.' });\n  }\n\n  var state = req.session[key].state;\n  if (!state) {\n   return callback(null, false, { message: 'Unable to verify authorization request state.' });\n  }\n\n  delete req.session[key].state;\n  if (Object.keys(req.session[key]).length === 0) {\n   delete req.session[key];\n  }\n\n  if (state.handle !== providedState) {\n   return callback(null, false, { message: 'Invalid authorization request state.' });\n  }\n\n  return callback(null, true, state);\n};\n\n// Expose constructor.\nmodule.exports = SessionStore;\n","/home/travis/build/npmtest/node-npmtest-passport-openidconnect/node_modules/passport-openidconnect/lib/errors/internaloautherror.js":"/**\n * `InternalOAuthError` error.\n *\n * InternalOAuthError wraps errors generated by node-oauth.  By wrapping these\n * objects, error messages can be formatted in a manner that aids in debugging\n * OAuth issues.\n *\n * @api public\n */\nfunction InternalOAuthError(message, err) {\n  Error.call(this);\n  Error.captureStackTrace(this, arguments.callee);\n  this.name = 'InternalOAuthError';\n  this.message = message;\n  this.oauthError = err;\n};\n\n/**\n * Inherit from `Error`.\n */\nInternalOAuthError.prototype.__proto__ = Error.prototype;\n\n/**\n * Returns a string representing the error.\n *\n * @return {String}\n * @api public\n */\nInternalOAuthError.prototype.toString = function() {\n  var m = this.message;\n  if (this.oauthError) {\n    if (this.oauthError instanceof Error) {\n      m += ' (' + this.oauthError + ')';\n    }\n    else if (this.oauthError.statusCode && this.oauthError.data) {\n      m += ' (status: ' + this.oauthError.statusCode + ' data: ' + this.oauthError.data + ')';\n    }\n  }\n  return m;\n}\n\n\n/**\n * Expose `InternalOAuthError`.\n */\nmodule.exports = InternalOAuthError;\n","/home/travis/build/npmtest/node-npmtest-passport-openidconnect/node_modules/passport-openidconnect/lib/errors/authorizationerror.js":"/**\n * `AuthorizationError` error.\n *\n * AuthorizationError represents an error in response to an authorization\n * request.  For details, refer to RFC 6749, section 4.1.2.1.\n *\n * References:\n *   - [The OAuth 2.0 Authorization Framework](http://tools.ietf.org/html/rfc6749)\n *\n * @constructor\n * @param {String} [message]\n * @param {String} [code]\n * @param {String} [uri]\n * @param {Number} [status]\n * @api public\n */\nfunction AuthorizationError(message, code, uri, status) {\n  if (!status) {\n    switch (code) {\n    case 'access_denied': status = 403; break;\n    case 'server_error': status = 502; break;\n    case 'temporarily_unavailable': status = 503; break;\n    }\n  }\n\n  Error.call(this);\n  Error.captureStackTrace(this, this.constructor);\n  this.name = this.constructor.name;\n  this.message = message;\n  this.code = code || 'server_error';\n  this.uri = uri;\n  this.status = status || 500;\n}\n\n/**\n * Inherit from `Error`.\n */\nAuthorizationError.prototype.__proto__ = Error.prototype;\n\n\n/**\n * Expose `AuthorizationError`.\n */\nmodule.exports = AuthorizationError;\n","/home/travis/build/npmtest/node-npmtest-passport-openidconnect/node_modules/passport-openidconnect/lib/registrar.js":"function Registrar(options) {\n  options = options || {};\n  \n  this._getClientCb = options.getClientCallback;\n  if (!this._getClientCb) {\n    throw new Error('OpenID Connect authentication requires getClientCallback option');\n  }\n}\n\nRegistrar.prototype.resolve = function(issuer, cb) {\n  this._getClientCb(issuer, function(err, client) {\n    if (err) { return cb(err); }\n    if (!client) { return cb(new Error('No client able to interact with OpenID provider: ' + issuer)); }\n    return cb(null, client);\n  });\n}\n\n\nmodule.exports = Registrar;\n","/home/travis/build/npmtest/node-npmtest-passport-openidconnect/node_modules/passport-openidconnect/lib/registration.js":"/**\n * Module dependencies.\n */\nvar url = require('url')\n  , querystring = require('querystring')\n  , http = require('http')\n  , https = require('https')\n  , util = require('util');\n\n\n/**\n * Register with an OpenID Connect provider.\n *\n * OpenID Connect is an identity layer on top of OAuth 2.0.  OAuth 2.0 requires\n * a client identifier (and corresponding secret) registered at the\n * authorization server.  To facilitate a more \"federated\" approach to\n * authentication, an OpenID Connect provider may implement an open registration\n * endpoint, in order to issue client IDs on an as-needed basis.\n *\n * This module implements support for dynamically registering with an OpenID\n * provider during authentication.  The registration information should be\n * persisted by the application, so that it can be reused in subsequent attempts\n * to authenticate with the same provider.\n *\n * References:\n *   - [OpenID Connect Dynamic Client Registration 1.0 - draft 14](http://openid.net/specs/openid-connect-registration-1_0.html)\n *\n * @return {Function}\n * @api public\n */\nmodule.exports = function(options, save) {\n  options = options || {};\n  \n  return function(provider, done) {\n    if (!provider.registrationURL) { return done(); }\n    \n    var params = {};\n    params.operation = 'client_register';\n    \n    if (options.redirectURI) {\n      if (Array.isArray(options.redirectURIs)) { \n        params.redirect_uris = options.redirectURI.join(' ');\n      } else {\n        params.redirect_uris = options.redirectURI\n      }\n    }\n    \n    if (options.name) { params.client_name = options.name; }\n    if (options.icon) { params.logo_url = options.icon; }\n    \n    if (options.contact) {\n      if (Array.isArray(options.contact)) { \n        params.contacts = options.contact.join(' ');\n      } else {\n        params.contacts = options.contact\n      }\n    }\n    \n    \n    var parsed = url.parse(provider.registrationURL)\n      , path\n      , headers = {}\n      , body;\n    \n    path = parsed.pathname;\n      \n    headers['Host'] = parsed.host;\n    headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    headers['Accept'] = 'application/json';\n    \n    body = querystring.stringify(params);\n    \n    var opts = {\n      host: parsed.hostname,\n      port: parsed.port,\n      path: path,\n      method: 'POST',\n      headers: headers\n    };\n    \n    // TODO: Add option to allow http requests (disabled by default).\n    var req = https.request(opts, function(res) {\n      var data = '';\n      \n      res.on('data', function(chunk) {\n        data += chunk;\n      });\n      res.on('end', function() {\n        if (res.statusCode !== 200) {\n          // TODO: Parse error information for diagnostic purposes.\n          return done(new Error(\"OpenID dynamic client registration request failed: \" + res.statusCode));\n        }\n        \n        var reg = {};\n        try {\n          var json = JSON.parse(data);\n          \n          reg.clientID = json.client_id;\n          reg.clientSecret = json.client_secret;\n          reg.accessToken = json.registration_access_token;\n          reg.expiresAt = json.expires_at;\n          \n          reg._raw = json;\n          \n          save(provider, reg, function(err) {\n            if (err) { return done(err); }\n            return done(null, reg);\n          });\n        } catch(ex) {\n          return done(ex);\n        }\n      });\n    });\n    req.on('error', function(err) {\n      return done(err);\n    });\n    \n    req.write(body);\n    req.end();\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-passport-openidconnect/node_modules/passport-openidconnect/lib/resolver.js":"/**\n * Module dependencies.\n */\nvar webfinger = require('webfinger').webfinger;\nvar NoOpenIDError = require('./errors/no_openid_error');\n\nvar REL = 'http://openid.net/specs/connect/1.0/issuer';\n// var REL = 'http://specs.openid.net/auth/2.0/provider';\n\n/**\n * Discover OpenID Connect provider configuration using WebFinger.\n *\n * This discovery mechanism uses WebFinger to discover the issuer for a\n * user-supplied identifier.  Once the issuer is known, it's configuration is\n * loaded.\n *\n * Note: Prior to draft 12, OpenID Connect Discovery used Simple Web Discovery\n *       rather than WebFinger.  At the time of writing, many provider\n *       implementations continue to implement SWD.\n *\n * References:\n *   - [OpenID Connect Discovery 1.0 - draft 12](http://openid.net/specs/openid-connect-discovery-1_0.html)\n *   - [WebFinger](http://tools.ietf.org/html/draft-ietf-appsawg-webfinger-08)\n *\n * @return {Function}\n * @api public\n */\nfunction Resolver() {\n}\n\nResolver.prototype.resolve = function (identifier, cb) {\n  webfinger(identifier, REL, { webfingerOnly: true }, function (err, jrd) {\n    if (err) { return cb(err); }\n    if (!jrd.links) { return cb(new NoOpenIDError('No links in resource descriptor', jrd)); }\n\n    var issuer;\n    for (var i = 0; i < jrd.links.length; i++) {\n      var link = jrd.links[i];\n      if (link.rel === REL) {\n        issuer = link.href;\n        break;\n      }\n    }\n\n    if (!issuer) {\n      return cb(new NoOpenIDError('No OpenID Connect issuer in resource descriptor', jrd));\n    }\n    return cb(null, issuer);\n  });\n};\n\nmodule.exports = Resolver;\n","/home/travis/build/npmtest/node-npmtest-passport-openidconnect/node_modules/passport-openidconnect/lib/errors/no_openid_error.js":"function NoOpenIDError(message, response) {\n  this.name = 'NoOpenIDError';\n  this.message = message;\n  this.stack = (new Error()).stack;\n  this.response = response;\n}\nNoOpenIDError.prototype = new Error;\n\nmodule.exports = NoOpenIDError;\n","/home/travis/build/npmtest/node-npmtest-passport-openidconnect/node_modules/passport-openidconnect/lib/setup.js":"var configuration = require('./configuration').configuration;\n\nexports = module.exports = function(identifier, done) {\n  console.log('OpenID Discovery...');\n  console.log('  identifer: ' + identifier);\n  \n  exports.discovery(identifier, function(err, issuer) {\n    if (err) { return done(err); }\n    \n    exports.configuration(issuer, function(err, config) {\n      if (err) { return done(err); };\n      \n      console.log('CONFIG:');\n      console.log(config);\n      \n      if (config.clientID) {\n        // If the configuration contains a client ID, setup is complete and\n        // authentication can proceed.  Having a client ID means the relying\n        // party has been registered with the provider, either via a manual\n        // process or dynamically during a previous authentication attempt.\n        return done(null, config);\n      } else {\n        // There's no client ID available, meaning the relying party is not\n        // registered with the provider.  Attempt to dynamically register with\n        // the provider and proceed if that is successful.\n        exports.registration(config, function(err, reg) {\n          if (err) { return done(err); };\n          config.clientID = reg.clientID;\n          config.clientSecret = reg.clientSecret;\n          \n          return done(null, config);\n        });\n      }\n    });\n  });\n}\n\n\nvar discoverers = [];\nvar configurers = [];\nvar registerers = [];\n\nexports.discovery = function(identifier, done) {\n  if (typeof identifier === 'function') {\n    return discoverers.push(identifier);\n  }\n\n  var stack = discoverers;\n  (function pass(i, err, issuer) {\n    // NOTE: `err` is ignored so that fallback discovery mechanisms will be\n    //       attempted.\n    if (err) {\n      console.log('discovery attempt failed...');\n      console.log(err);\n    }\n    // issuer was obtained, done\n    if (issuer) { return done(null, issuer); }\n    \n    var layer = stack[i];\n    if (!layer) {\n      return done(new Error('Failed to discover OpenID Connect provider'));\n    }\n    \n    try {\n      layer(identifier, function(e, is) { pass(i + 1, e, is); } )\n    } catch (ex) {\n      return done(ex);\n    }\n  })(0);\n}\n\nexports.configuration = function(issuer, done) {\n  if (typeof issuer === 'function') {\n    return configurers.push(issuer);\n  }\n  \n  var stack = configurers;\n  (function pass(i, err, config) {\n    // error or config was obtained, done\n    if (err || config) { return done(err, config); }\n    \n    var layer = stack[i];\n    if (!layer) {\n      // Locally-implemented methods of loading configuration did not obtain a\n      // result.  Proceed to protocol-defined mechanisms in an attempt to\n      // discover the provider's configuration.\n      return configuration(issuer, done);\n    }\n    \n    try {\n      layer(issuer, function(e, c) { pass(i + 1, e, c); } )\n    } catch (ex) {\n      return done(ex);\n    }\n  })(0);\n}\n\nexports.registration = function(provider, done) {\n  if (typeof provider === 'function') {\n    return registerers.push(provider);\n  }\n  \n  var stack = registerers;\n  (function pass(i, err, config) {\n    // error or config was obtained, done\n    if (err || config) { return done(err, config); }\n    \n    var layer = stack[i];\n    if (!layer) {\n      return done(new Error('Failed to register with OpenID Connect provider'));\n    }\n    \n    try {\n      layer(provider, function(e, c) { pass(i + 1, e, c); } )\n    } catch (ex) {\n      return done(ex);\n    }\n  })(0);\n}\n","/home/travis/build/npmtest/node-npmtest-passport-openidconnect/node_modules/passport-openidconnect/lib/setup/dynamic.js":"var request = require('request');\nvar Resolver = require('../resolver');\nvar Registrar = require('../registrar');\n\nvar __resolver;\nvar __registrar;\n\n\nexports = module.exports = function(options) {\n  var resolver = options.resolver;\n  var registrar = options.registrar;\n  \n  if (!resolver) {\n    // Construct and use singleton resolver.\n    __resolver = __resolver || new Resolver(options);\n    resolver = __resolver;\n  }\n  if (!registrar) {\n    // Construct and use singleton registrar.\n    __registrar = __registrar || new Registrar(options);\n    registrar = __registrar;\n  }\n  \n  \n  return function dynamic(identifier, cb) {\n\n    resolver.resolve(identifier, function(err, issuer) {\n      if (err) { return cb(err); }\n      \n      \n      // TODO: Check if path already ends in \"/\"\n      var url = issuer + '/.well-known/openid-configuration';\n      \n      // TODO: Pass accept header correctly\n      /*\n      headers['Accept'] = 'application/json';\n  \n      var options = {\n        host: parsed.hostname,\n        port: parsed.port,\n        path: path,\n        method: 'GET',\n        headers: headers\n      };\n      */\n      \n      request.get(url, function(err, res, body) {\n        if (err) { return cb(err); }\n        if (res.statusCode !== 200) {\n          return cb(new Error(\"Unexpected status code from OpenID provider configuration: \" + res.statusCode));\n        }\n      \n        var config = {};\n      \n        try {\n          var json = JSON.parse(body);\n        \n          config.issuer = json.issuer;\n          config.authorizationURL = json.authorization_endpoint;\n          config.tokenURL = json.token_endpoint;\n          config.userInfoURL = json.userinfo_endpoint;\n          config.registrationURL = json.registration_endpoint;\n        \n          config._raw = json;\n        \n          //cb(null, config);\n        } catch(ex) {\n          return cb(new Error('Failed to parse OpenID provider configuration'));\n        }\n      \n        // TODO: Pass registrationURL here.\n        registrar.resolve(config.issuer, function(err, client) {\n          if (err) { return cb(null, err); }\n          config.clientID = client.id;\n          config.clientSecret = client.secret;\n          if (client.redirectURIs) {\n            config.callbackURL = client.redirectURIs[0];\n          }\n          return cb(null, config);\n        });\n      });\n    });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-passport-openidconnect/node_modules/passport-openidconnect/lib/setup/manual.js":"exports = module.exports = function(options) {\n\n  return function manual(identifier, cb) {\n    var missing = ['issuer', 'authorizationURL', 'tokenURL', 'clientID', 'clientSecret'].filter( function(opt) { return !options[opt] } );\n    if (missing.length) return cb(new Error('Manual OpenID configuration is missing required parameter(s) - ' + missing.join(', ')));\n\n    var params = {\n      issuer: options.issuer,\n      authorizationURL: options.authorizationURL,\n      tokenURL: options.tokenURL,\n      userInfoURL: options.userInfoURL,\n      clientID: options.clientID,\n      clientSecret: options.clientSecret,\n      callbackURL: options.callbackURL\n    }\n\n    Object.keys(options).map(opt => {\n      if (['nonce', 'display', 'prompt', 'max_age', 'ui_locals', 'id_token_hint', 'login_hint', 'acr_values'].indexOf(opt) !== -1) {\n        params[opt] = options[opt];\n      }\n    });\n\n    return cb(null, params);\n  };\n};\n"}